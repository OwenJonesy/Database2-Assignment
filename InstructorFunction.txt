CREATE OR REPLACE FUNCTION UpdateLessonCount(
    IN student_id INT,
    IN new_estimated_lessons INT,
    IN new_assessment_date DATE,
    IN new_instructor_id INT,
    OUT result text
)
AS $$
BEGIN
    -- Check if the new_estimated_lessons exceed the maximum allowed (12)
    IF new_estimated_lessons > 12 THEN
        result := 'Estimated lessons cannot exceed 12.';
    ELSE
        -- Update the assessment information for the given student
        UPDATE Assessment
        SET
            EstimatedLessons = new_estimated_lessons,
            AssessmentDate = new_assessment_date,
            InstructorID = new_instructor_id
        WHERE StudentID = student_id;

        -- Check if the update was successful
        IF FOUND THEN
            result := 'Assessment updated for Student ' || student_id || ' with Estimated Lessons: ' || new_estimated_lessons;
        ELSE
            result := 'No assessment found for the student.';
        END IF;
    END IF;

    EXCEPTION 
    WHEN OTHERS THEN  
        -- Handle other exceptions 
        result := 'An error occurred.'; 
    RETURN;  -- Add a RETURN statement here
END; 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION UpdateAssessment(
    student_id INT,
    new_estimated_lessons INT,
    new_assessment_date DATE,
    new_instructor_id INT
)
RETURNS TEXT
AS $$
DECLARE
    result TEXT;
BEGIN
    -- Call the modified stored procedure to update the assessment information
    PERFORM UpdateLessonCount(student_id, new_estimated_lessons, new_assessment_date, new_instructor_id);

    -- Check if the result message indicates a successful update
    result := 'Assessment updated for Student ' || student_id;

    RETURN result; -- Add a RETURN statement here
EXCEPTION
    WHEN OTHERS THEN
        -- Handle any exceptions
        result := 'An error occurred.';
    
    RETURN result; -- Add a RETURN statement here
END;
$$ LANGUAGE plpgsql;


