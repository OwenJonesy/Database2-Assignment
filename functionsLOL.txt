Student Role:

Register as a Student:
sql
Copy code
CREATE OR REPLACE FUNCTION register_student(student_name VARCHAR, nct_status VARCHAR) RETURNS INT AS $$
DECLARE
    student_id INT;
BEGIN
    INSERT INTO DrivingStudent (Name, NCTStatus) VALUES (student_name, nct_status) RETURNING StudentID INTO student_id;
    RETURN student_id;
END;
$$ LANGUAGE plpgsql;
Book an Assessment Lesson:
sql
Copy code
CREATE OR REPLACE FUNCTION book_assessment_lesson(student_id INT) RETURNS BOOLEAN AS $$
BEGIN
    INSERT INTO Assessment (StudentID, EstimatedLessons, AssessmentDate) VALUES (student_id, 0, NOW() + INTERVAL '7 days');
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;
Receive Assessment Results:
sql
Copy code
CREATE OR REPLACE FUNCTION receive_assessment_results(student_id INT) RETURNS INT AS $$
DECLARE
    estimated_lessons INT;
BEGIN
    SELECT EstimatedLessons INTO estimated_lessons FROM Assessment WHERE StudentID = student_id;
    RETURN estimated_lessons;
END;
$$ LANGUAGE plpgsql;

**Instructor Role:**

1. Get Instructor's Schedule:

```sql
CREATE OR REPLACE FUNCTION get_instructor_schedule(instructor_id INT) RETURNS TABLE (LessonID INT, LessonTopic VARCHAR, DateTime TIMESTAMPTZ) AS $$
BEGIN
    RETURN QUERY SELECT LessonID, LessonTopic, DateTime FROM Lesson WHERE InstructorID = instructor_id;
END;
$$ LANGUAGE plpgsql;

**Booking Staff Role:**

1. Book a Lesson:

```sql
CREATE OR REPLACE FUNCTION book_lesson(student_id INT, instructor_id INT, lesson_id INT, car_id INT, date_time TIMESTAMPTZ) RETURNS BOOLEAN AS $$
BEGIN
    INSERT INTO Booking (StudentID, InstructorID, LessonID, CarID, DateTime) VALUES (student_id, instructor_id, lesson_id, car_id, date_time);
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

2. Check for New Assessments and Contact Students:

```sql
CREATE OR REPLACE FUNCTION check_new_assessments() RETURNS BOOLEAN AS $$
BEGIN
    -- Implement logic to check for new assessments and contact students.
    -- For simplicity, returning TRUE here.
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

3. Book a Car for a Student:

```sql
CREATE OR REPLACE FUNCTION book_car(student_id INT, car_id INT) RETURNS BOOLEAN AS $$
BEGIN
    INSERT INTO CarBooking (StudentID, CarID) VALUES (student_id, car_id);
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

4. Make a Payment:

```sql
CREATE OR REPLACE FUNCTION make_payment(student_id INT, amount DECIMAL, payment_method VARCHAR) RETURNS BOOLEAN AS $$
BEGIN
    -- Implement payment handling logic here.
    -- For simplicity, returning TRUE here.
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;