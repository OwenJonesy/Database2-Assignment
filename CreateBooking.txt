CREATE OR REPLACE FUNCTION create_booking(

    student_id INT,

    instructor_id INT,

    lesson_number INT,

    lesson_topic VARCHAR(255),

    staff_id INT,

    booking_datetime TIMESTAMP

) RETURNS VOID AS $$

BEGIN

    -- Insert a new record into the Lesson table

    INSERT INTO Lesson (StudentID, LessonNumber, LessonTopic)

    VALUES (student_id, lesson_number, lesson_topic);



    -- Insert a new booking record into the Booking table, linking it to the LessonID

    INSERT INTO Booking (StudentID, InstructorID, LessonID, StaffID, DateTime)

    VALUES (student_id, instructor_id, currval('lesson_lessonid_seq'), staff_id, booking_datetime);

END;

$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION check_lesson_constraints() RETURNS TRIGGER AS $$

BEGIN

    -- Get the previous lesson number for the student

    DECLARE

        prev_lesson_number INT;

    BEGIN

        SELECT MAX(LessonNumber) INTO prev_lesson_number

        FROM Lesson AS l

        WHERE l.StudentID = NEW.StudentID;

       

        -- Check if the student has skipped a lesson

        IF NEW.LessonNumber <> prev_lesson_number + 1 THEN

            RAISE EXCEPTION 'Student skipped a lesson!';

        END IF;

    END;



    -- Check if the student has exceeded estimated lessons

    DECLARE

        estimated_lessons INT;

    BEGIN

        SELECT EstimatedLessons INTO estimated_lessons

        FROM Assessment AS a

        WHERE a.StudentID = NEW.StudentID;

       

        IF NEW.LessonNumber > estimated_lessons THEN

            RAISE EXCEPTION 'Student exceeded estimated lessons!';

        END IF;

    END;



    RETURN NEW;

END;

$$ LANGUAGE plpgsql;





-- Drop the existing trigger

DROP TRIGGER IF EXISTS lesson_constraints_check ON Lesson;



-- Create the updated trigger

CREATE TRIGGER lesson_constraints_check

BEFORE INSERT

ON Lesson

FOR EACH ROW

EXECUTE FUNCTION check_lesson_constraints();

