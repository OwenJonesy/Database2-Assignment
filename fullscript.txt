-- DROP TABLES

-- Drop the tables if they exist (in the reverse order of creation to avoid foreign key constraints)
DROP TABLE IF EXISTS "Drive857A".Payment;
DROP TABLE IF EXISTS "Drive857A".Assessment;
DROP TABLE IF EXISTS "Drive857A".Booking;
DROP TABLE IF EXISTS "Drive857A".Lesson;
DROP TABLE IF EXISTS "Drive857A".Instructor;
DROP TABLE IF EXISTS "Drive857A".DrivingStudent;
DROP TABLE IF EXISTS "Drive857A".BookingStaff;

-- CREATE TABLES

-- Create the DrivingStudent table (formerly Student)
CREATE TABLE "Drive857A".DrivingStudent (
    StudentID SERIAL PRIMARY KEY,
    Name VARCHAR(255),
    RegistrationNumber VARCHAR(50) UNIQUE,
    NCTStatus VARCHAR(50),
    AmountDue INT
);

-- Create the Instructor table without the Availability column
CREATE TABLE "Drive857A".Instructor (
    InstructorID SERIAL PRIMARY KEY,
    Name VARCHAR(255)
);

-- Create the Lesson table with StudentID
CREATE TABLE "Drive857A".Lesson (
    LessonID SERIAL PRIMARY KEY,
    StudentID INT, -- Add StudentID
    LessonNumber INT,
    LessonTopic VARCHAR(255)
);

-- Add a foreign key constraint to link StudentID to DrivingStudent's StudentID
ALTER TABLE "Drive857A".Lesson
ADD CONSTRAINT fk_lesson_student
FOREIGN KEY (StudentID)
REFERENCES "Drive857A".DrivingStudent(StudentID);

-- Create the BookingStaff table
CREATE TABLE "Drive857A".BookingStaff (
    StaffID SERIAL PRIMARY KEY,
    Name VARCHAR(255),
    Role VARCHAR(255)
);

-- Create the Booking table
CREATE TABLE "Drive857A".Booking (
    BookingID SERIAL PRIMARY KEY,
    StudentID INT,
    InstructorID INT,
    LessonID INT,
    StaffID INT,
    DateTime TIMESTAMP,
    FOREIGN KEY (StudentID) REFERENCES "Drive857A".DrivingStudent(StudentID),
    FOREIGN KEY (InstructorID) REFERENCES "Drive857A".Instructor(InstructorID),
    FOREIGN KEY (LessonID) REFERENCES "Drive857A".Lesson(LessonID),
    FOREIGN KEY (StaffID) REFERENCES "Drive857A".BookingStaff(StaffID)
);

-- Create the Assessment table
CREATE TABLE "Drive857A".Assessment (
    AssessmentID SERIAL PRIMARY KEY,
    StudentID INT,
    InstructorID INT,
    EstimatedLessons INT,
    AssessmentDate DATE,
    FOREIGN KEY (StudentID) REFERENCES "Drive857A".DrivingStudent(StudentID),
    FOREIGN KEY (InstructorID) REFERENCES "Drive857A".Instructor(InstructorID)
);

-- Create the Payment table
CREATE TABLE "Drive857A".Payment (
    PaymentID SERIAL PRIMARY KEY,
    StudentID INT,
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    PaymentMethod VARCHAR(50),
    FOREIGN KEY (StudentID) REFERENCES "Drive857A".DrivingStudent(StudentID)
);

-- INSERTS

-- Insert sample data into the "DrivingStudent" table
INSERT INTO "Drive857A".DrivingStudent (Name, RegistrationNumber, NCTStatus, AmountDue)
VALUES ('John Doe', 'DS12345', 'Valid', 480),
       ('Jane Smith', 'DS67890', 'Expired', 480),
       ('Alice Johnson', 'DS11111', 'Valid', 480),
       ('Bob Wilson', 'DS22222', 'Expired', 480);

-- Insert sample data into the "Instructor" table
INSERT INTO "Drive857A".Instructor (Name)
VALUES ('Instructor A'),
       ('Instructor B'),
       ('Instructor C'),
       ('Owen');

-- Insert sample data into the "Lesson" table
INSERT INTO "Drive857A".Lesson (StudentID, LessonNumber, LessonTopic)
VALUES (1, 1, 'Parallel Parking'),
       (2, 2, 'Lane Change'),
       (3, 3, 'Parking on a Hill'),
       (4, 4, 'Intersection Right of Way');

-- Insert sample data into the "BookingStaff" table
INSERT INTO "Drive857A".BookingStaff (Name, Role)
VALUES ('Staff Member 1', 'Booking Agent'),
       ('Staff Member 2', 'Coordinator'),
       ('Staff Member 3', 'Coordinator'),
       ('Gav', 'Booking Agent');

-- Insert sample data into the "Booking" table
INSERT INTO "Drive857A".Booking (StudentID, InstructorID, LessonID, DateTime, StaffID)
VALUES (1, 1, 1, '2023-10-25 09:00:00', 1),
       (2, 2, 2, '2023-10-26 10:00:00', 2),
       (3, 3, 3, '2023-10-27 11:00:00', 1),
       (4, 4, 4, '2023-10-28 14:00:00', 2);

-- Insert sample data into the "Assessment" table
INSERT INTO "Drive857A".Assessment (StudentID, InstructorID, EstimatedLessons, AssessmentDate)
VALUES (1, 1, 10, '2023-10-30'),
       (2, 2, 8, '2023-11-01'),
       (3, 3, 9, '2023-10-30'),
       (4, 4, 7, '2023-11-02');

-- Insert sample data into the "Payment" table
INSERT INTO "Drive857A".Payment (StudentID, Amount, PaymentDate, PaymentMethod)
VALUES (1, 200.00, '2023-10-25', 'Credit Card'),
       (2, 180.00, '2023-10-26', 'Cheque'),
       (3, 250.00, '2023-10-27', 'Credit Card'),
       (4, 210.00, '2023-10-28', 'Cash');

-- Gavins
CREATE OR REPLACE FUNCTION "Drive857A".add_student(

    student_id INT,

    student_name VARCHAR(255),

    registration_number VARCHAR(50),

    nct_status VARCHAR(50),

    amount_due INT

)

RETURNS VOID AS $$

BEGIN

    INSERT INTO "Drive857A".DrivingStudent (StudentID, Name, RegistrationNumber, NCTStatus, AmountDue)

    VALUES (student_id, student_name, registration_number, nct_status, amount_due);

    -- Insert a corresponding record into the Assessment table

    INSERT INTO "Drive857A".Assessment (StudentID) VALUES (student_id);

END;

$$ LANGUAGE plpgsql;



-- Create a trigger that checks for duplicates before inserting

CREATE OR REPLACE FUNCTION "Drive857A".check_duplicate_student()

RETURNS TRIGGER AS $$

BEGIN

    IF EXISTS (

        SELECT 1

        FROM "Drive857A".DrivingStudent

        WHERE Name = NEW.Name AND RegistrationNumber <> NEW.RegistrationNumber

    ) THEN

        RAISE EXCEPTION 'Duplicate person with a different student number detected';

    END IF;

    RETURN NEW;

END;

$$ LANGUAGE plpgsql;



-- Create a trigger that calls the function before an insert

CREATE TRIGGER before_insert_check_duplicate

BEFORE INSERT ON "Drive857A".DrivingStudent

FOR EACH ROW

EXECUTE FUNCTION "Drive857A".check_duplicate_student();



CREATE OR REPLACE FUNCTION "Drive857A".create_booking(

    student_id INT,

    instructor_id INT,

    lesson_number INT,

    lesson_topic VARCHAR(255),

    staff_id INT,

    booking_datetime TIMESTAMP

) RETURNS VOID AS $$

BEGIN

    -- Insert a new record into the Lesson table

    INSERT INTO "Drive857A".Lesson (StudentID, LessonNumber, LessonTopic)

    VALUES (student_id, lesson_number, lesson_topic);

    -- Insert a new booking record into the Booking table, linking it to the LessonID

    INSERT INTO "Drive857A".Booking (StudentID, InstructorID, LessonID, StaffID, DateTime)

    VALUES (student_id, instructor_id, currval('"Drive857A".lesson_lessonid_seq'), staff_id, booking_datetime);

END;

$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION "Drive857A".check_lesson_constraints() RETURNS TRIGGER AS $$

BEGIN

    -- Get the previous lesson number for the student

    DECLARE

        prev_lesson_number INT;

    BEGIN

        SELECT MAX(LessonNumber) INTO prev_lesson_number

        FROM "Drive857A".Lesson AS l

        WHERE l.StudentID = NEW.StudentID;

        -- Check if the student has skipped a lesson

        IF NEW.LessonNumber <> prev_lesson_number + 1 THEN

            RAISE EXCEPTION 'Student skipped a lesson!';

        END IF;

    END;

    -- Check if the student has exceeded estimated lessons

    DECLARE

        estimated_lessons INT;

    BEGIN

        SELECT EstimatedLessons INTO estimated_lessons

        FROM "Drive857A".Assessment AS a

        WHERE a.StudentID = NEW.StudentID;

        IF NEW.LessonNumber > estimated_lessons THEN

            RAISE EXCEPTION 'Student exceeded estimated lessons!';

        END IF;

    END;

    RETURN NEW;

END;

$$ LANGUAGE plpgsql;



-- Drop the existing trigger

DROP TRIGGER IF EXISTS lesson_constraints_check ON "Drive857A".Lesson;

-- Create the updated trigger

CREATE TRIGGER lesson_constraints_check

BEFORE INSERT

ON "Drive857A".Lesson

FOR EACH ROW

EXECUTE FUNCTION "Drive857A".check_lesson_constraints();

--owens

-- Create functions and triggers in the "Drive857A" schema

-- Create a function to update lesson count and assessment
CREATE OR REPLACE FUNCTION "Drive857A".UpdateLessonCount(
    IN student_id INT,
    IN new_estimated_lessons INT,
    IN new_assessment_date DATE,
    IN new_instructor_id INT,
    OUT result TEXT
)
AS $$
BEGIN
    -- Check if the new_estimated_lessons exceed the maximum allowed (12)
    IF new_estimated_lessons > 12 THEN
        result := 'Estimated lessons cannot exceed 12.';
    ELSE
        -- Update the assessment information for the given student
        UPDATE "Drive857A".Assessment
        SET
            EstimatedLessons = new_estimated_lessons,
            AssessmentDate = new_assessment_date,
            InstructorID = new_instructor_id
        WHERE StudentID = student_id;
        
        -- Check if the update was successful
        IF FOUND THEN
            result := 'Assessment updated for Student ' || student_id || ' with Estimated Lessons: ' || new_estimated_lessons;
        ELSE
            result := 'No assessment found for the student.';
        END IF;
    END IF;

    EXCEPTION 
    WHEN OTHERS THEN 
        -- Handle other exceptions
        result := 'An error occurred.';
    RETURN;  -- Add a RETURN statement here
END;
$$ LANGUAGE plpgsql;

-- Create a function to update assessment information
CREATE OR REPLACE FUNCTION "Drive857A".UpdateAssessment(
    student_id INT,
    new_estimated_lessons INT,
    new_assessment_date DATE,
    new_instructor_id INT
)
RETURNS TEXT
AS $$
DECLARE
    result TEXT;
BEGIN
    -- Call the modified stored procedure to update the assessment information
    PERFORM "Drive857A".UpdateLessonCount(student_id, new_estimated_lessons, new_assessment_date, new_instructor_id);
    
    -- Check if the result message indicates a successful update
    result := 'Assessment updated for Student ' || student_id;
    
    RETURN result; -- Add a RETURN statement here
    
EXCEPTION
    WHEN OTHERS THEN
        -- Handle any exceptions
        result := 'An error occurred.';
    
    RETURN result; -- Add a RETURN statement here
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to update AmountDue based on EstimatedLessons
CREATE OR REPLACE FUNCTION "Drive857A".UpdateAmountDue()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE "Drive857A".DrivingStudent ds
    SET AmountDue = a.EstimatedLessons * 40
    FROM "Drive857A".Assessment a
    WHERE ds.StudentID = a.StudentID;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger that fires when an assessment is inserted or updated
CREATE TRIGGER UpdateAmountDueTrigger
AFTER INSERT OR UPDATE
ON "Drive857A".Assessment
FOR EACH ROW
EXECUTE FUNCTION "Drive857A".UpdateAmountDue();

--stephens

-- Create functions in the "Drive857A" schema
CREATE OR REPLACE FUNCTION "Drive857A".InsertPayment(student_id INT, amount DECIMAL(10, 1), payment_date DATE, payment_method VARCHAR(50))
RETURNS VOID AS $$
DECLARE
    student_due DECIMAL(10, 1);
BEGIN
    -- Get the current amount due for the student
    SELECT AmountDue INTO student_due
    FROM "Drive857A".DrivingStudent
    WHERE StudentID = student_id;

    -- Check if the amount to be paid is less than or equal to the amount due
    IF amount <= student_due THEN
        -- Insert a payment record into the Payment table
        INSERT INTO "Drive857A".Payment (StudentID, Amount, PaymentDate, PaymentMethod)
        VALUES (student_id, amount, payment_date, payment_method);

        -- Update the student's amount due by deducting the payment amount
        UPDATE "Drive857A".DrivingStudent
        SET AmountDue = AmountDue - amount
        WHERE StudentID = student_id;
    ELSE
        -- Raise an exception if the amount paid is more than the amount due
        RAISE EXCEPTION 'Amount paid cannot be more than the amount due for the student';
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Deferred ApplyPayment Function
CREATE OR REPLACE FUNCTION "Drive857A".DeferredApplyPayment()
RETURNS TRIGGER AS $$
BEGIN
    -- Update the student's amount due by deducting the payment amount
    UPDATE "Drive857A".DrivingStudent
    SET AmountDue = AmountDue - NEW.Amount
    WHERE StudentID = NEW.StudentID;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Deferred Payment Trigger
CREATE OR REPLACE FUNCTION "Drive857A".DeferredPaymentTrigger()
RETURNS TRIGGER AS $$
BEGIN
    -- Call the ApplyPayment function with the payment details
    PERFORM "Drive857A".ApplyPayment(NEW.StudentID, NEW.Amount);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger for deferred payment
CREATE TRIGGER DeferredPaymentTrigger
AFTER INSERT ON "Drive857A".Payment
FOR EACH ROW
EXECUTE FUNCTION "Drive857A".DeferredPaymentTrigger();

-- Grant permissions

-- Grant necessary permissions on tables and sequences
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".DrivingStudent TO "C21483936";
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".Lesson TO "C21483936";
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".Assessment TO "C21483936";
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".Booking TO "C21483936";

-- Grant sequence permissions
GRANT USAGE, SELECT ON SEQUENCE "Drive857A".drivingstudent_studentid_seq TO "C21483936";
GRANT USAGE, SELECT ON SEQUENCE "Drive857A".lesson_lessonid_seq TO "C21483936";
GRANT USAGE, SELECT ON SEQUENCE "Drive857A".assessment_assessmentid_seq TO "C21483936";
GRANT USAGE, SELECT ON SEQUENCE "Drive857A".booking_bookingid_seq TO "C21483936";

-- Grant execute permission on functions
GRANT EXECUTE ON FUNCTION "Drive857A".create_booking TO "C21483936";
GRANT EXECUTE ON FUNCTION "Drive857A".UpdateAssessment TO "C21377551";
GRANT EXECUTE ON FUNCTION "Drive857A".UpdateLessonCount TO "C21377551";



GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".Assessment TO "C21377551";
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".drivingstudent TO "C21377551";

GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".drivingstudent TO "C21760305";
GRANT SELECT, INSERT, UPDATE, TRIGGER ON TABLE "Drive857A".payment TO "C21760305";
GRANT USAGE, SELECT ON SEQUENCE "Drive857A".payment_paymentid_seq TO "C21760305";



select * from lesson;
select * from assessment;
select * from booking;
select * from bookingstaff;
select * from drivingstudent;
select * from instructor;
select * from payment;
-- Commit the changes
COMMIT;